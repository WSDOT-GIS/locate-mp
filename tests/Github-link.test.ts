/* eslint-env: node */

/**
 * Tests the functions that convert from GitHub repo URLs to
 * Github Pages URLs and vice-versa.
 */
import {
  getGithubUrlFromGithubPages,
  getGithubPagesUrlFromGithubRepoUrl,
  isGithubRepoUrl,
} from "../src/common/Github-Link";
import { test, describe } from "vitest";

const pagesUrl = "https://wsdot-gis.github.io/wsdot-mp-map";
const repoUrl = "https://github.com/WSDOT-GIS/wsdot-mp-map";

describe.concurrent("Github link", () => {
  // Create regular expressions to match the expected responses.
  const [pagesRe, repoRe] = [pagesUrl, repoUrl].map(
    (url) =>
      new RegExp(
        // Add optional trailing slash.
        String.raw`${url}\/?`
          // Excape the periods so they won't match any character.
          .replace(".", String.raw`\.`),
        // Make case-insensitive
        "i",
      ),
  );

  test("create github repo link", ({ expect }) => {
    const outputUrl = getGithubUrlFromGithubPages(undefined, pagesUrl);
    expect(outputUrl).toMatch(repoRe);
  });

  test("create github pages link", ({ expect }) => {
    const outputUrl = getGithubPagesUrlFromGithubRepoUrl(undefined, repoUrl);
    expect(outputUrl).toMatch(pagesRe);
  });
});

// Generated by CodiumAI

describe.concurrent("isGithubRepoUrl", () => {
  // Returns true for a valid GitHub repository URL
  test("should return true for a valid GitHub repository URL", ({ expect }) => {
    const url = "https://github.com/org/repo";
    const result = isGithubRepoUrl(url);
    expect(result).toBe(true);
  });

  // Returns true for a valid GitHub repository URL with uppercase letters
  test("should return true for a valid GitHub repository URL with uppercase letters", ({
    expect,
  }) => {
    const url = "https://github.com/ORG/REPO";
    const result = isGithubRepoUrl(url);
    expect(result).toBe(true);
  });

  // Returns true for a valid GitHub repository URL with numbers
  test("should return true for a valid GitHub repository URL with numbers", ({
    expect,
  }) => {
    const url = "https://github.com/org123/repo456";
    const result = isGithubRepoUrl(url);
    expect(result).toBe(true);
  });

  // Returns false for an empty string
  test("should return false for an empty string", ({ expect }) => {
    const url = "";
    const result = isGithubRepoUrl(url);
    expect(result).toBe(false);
  });

  // Returns false for a URL with an invalid domain
  test("should return false for a URL with an invalid domain", ({ expect }) => {
    const url = "https://example.com/org/repo";
    const result = isGithubRepoUrl(url);
    expect(result).toBe(false);
  });

  // Returns false for a URL with an invalid path
  test("should return false for a URL with an invalid path", ({ expect }) => {
    const url = "https://github.fake.cn/org/repo";
    const result = isGithubRepoUrl(url);
    expect(result).toBe(false);
  });
});
