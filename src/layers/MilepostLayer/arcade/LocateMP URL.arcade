/**
 * LocateMP URL.arcade
 */

var urlBase = "";

// Split the Route ID into SR, RRT, and RRQ parts.
var routeParts = splitRouteId($feature.Route);
var attributes = Dictionary($feature)["attributes"];

// Construct the key value pairs for the query string.
var parts = [
  ["SR", routeParts.sr],
  ["RRT", routeParts.rrt],
  ["RRQ", routeParts.rrq],
  ["DIR", $feature.Direction],
  ["SRMP", Text($feature.SRMP,"#.##") + IIf($feature.Back == "B", "B", "")]
];

if (HasKey(attributes, "EndSrmp")) {
  var mpText = Text(attributes.EndSrmp,"#.##");
  if (HasKey(attributes, "EndBack") && attributes.EndBack == "B") {
    mpText += "B";
  }
  Push(parts,["EMP", mpText]);
}

/**
 * Detects if a tuple's value (element at index 1) is neither null nor empty.
 * @param kvp - A tuple containing a key and a value.
 * @returns - Returns true if the tuple's value is neither null nor empty.
 */
function isValueNotEmpty(kvp) {
  return kvp[1] != null && kvp[1] != "";
}

// Remove any items from the array where the value portion of the tuple is null or empty.
var keyValuePairs = Filter(parts, isValueNotEmpty);

/**
 * Concatenates the key and value of a tuple into a string, separated by an equals sign.
 * @param kvp - A tuple containing a key and a value.
 * @returns - A string containing the key and value separated by an equals sign.
 */
function keyEqualsValue(kvp) {
  return Concatenate(kvp, "=");
}

// Create the URL string, appending the query string parameters.
var url = urlBase + "?" + Concatenate(Map(keyValuePairs, keyEqualsValue), "&");

return url;