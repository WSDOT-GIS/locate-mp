/**
 * Modified version of a function that came from https://github.com/Esri/arcade-expressions/blob/master/popup/url-withlocation.md
 */

/**
 * Converts Auxiliary Sphere coordinates to WGS 1984.
 * @param {Number} x - x coordinate
 * @param {Number} y - y coordinate
 * @returns {Dictionary<("Latitude"|"Longitude"), Number>} - A dictionary with properties named "Latitude" and "Longitude".
 */
function AuxSphereToLatLon(x, y) {
  Console("Converting...");
  // Conversion based on http://dotnetfollower.com/wordpress/2011/07/javascript-how-to-convert-mercator-sphere-coordinates-to-latitude-and-longitude/
  var rMajor = 6378137;
  var shift = PI * rMajor;
  var Longitude = x / shift * 180.0;
  var Latitude = y / shift * 180.0;
  Latitude = 180 / PI * (2 * Atan(Exp(Latitude * PI / 180.0)) - PI / 2.0);
  return { Latitude, Longitude };
}

/**
 * Gets the Latitude and Longitude for the current feature.
 */
function getLatLon() {
  // Convert Lines/Polygons to Points
  var PointGeometry = Centroid(Geometry($feature));

  var ArcadeX = PointGeometry.x;
  var ArcadeY = PointGeometry.y;
  var ArcadeSr = PointGeometry.spatialReference.wkid;
  var Latitude, Longitude;

  if (ArcadeSr == 4326) {
    Console("4326 Spatial Reference - No Conversion Necessary");
    Latitude = ArcadeY;
    Longitude = ArcadeX;
  } else if (ArcadeSr == 102100) {
    Console("102100 Spatial Reference - Conversion Necessary");
    var latLongDict = AuxSphereToLatLon(ArcadeX, ArcadeY);
    Latitude = latLongDict.Latitude;
    Longitude = latLongDict.Longitude;
  } else {
    Console(
      ArcadeSr +
      " Spatial Reference is not supported - currently works with Web Maps where the basemap is in WGS84 (4326) or Web Mercator Auxiliary Sphere 102100"
    );
  }
  return { Latitude, Longitude };
}

var route = $feature.Route
var direction = $feature.Direction
var srmp = $feature.Srmp
var back = $feature.Back

/* "Route":"005","Direction":"I","Srmp":143.86,"Back":""}} */

var srRrtRrq = splitRouteId(route)

var latLongDict = getLatLon();
var Latitude = latLongDict.Latitude;
var Longitude = latLongDict.Longitude;

var urlTemplates = Dictionary(
  "Google Panoramic",
  `https://www.google.com/maps/@?api=1&map_action=pano&viewpoint=${LATITUDE},${LONGITUDE}`,
  "Google Pin",
  `https://maps.google.com/maps?t=k&q=loc:${LATITUDE},${LONGITUDE}`,
  "Bing Maps",
  `https://bing.com/maps/default.aspx?where=${LATITUDE},${LONGITUDE}`,
  "GeoHack",
  `https://geohack.toolforge.org/geohack.php?params=${LATITUDE};${LONGITUDE}`,
)

// Initialize the list of HTML anchors.
var links = []

// Populate the array of anchors.
for (var linkName in urlTemplates) {
  var url = urlTemplates[linkName];
  var anchor = `<a href='${url}'>${linkName}</a>`
  Push(links, anchor)
}

/**
 * Wraps an HTML element in a list item.
 * @param element - Text to be wrapped in an <li> tag.
 * @returns - The input text wrapped in an <li> tag.
 */
function wrapInListItem(element) {
  return `<li>${element}</li>`
}

// Wrap each link in a list item.
links = Map(links, wrapInListItem)

var text = `<ul class='popup-link-list'>${Concatenate(links, TextFormatting.NewLine)}</ul>`

return { 
  title: 'External Links',
  type : 'text', 
  text
}